# PrizmBets Production Docker Compose Configuration
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    container_name: prizmbets-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: prizmbets
      POSTGRES_USER: ${DB_USER:-prizmbets}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - prizmbets-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-prizmbets} -d prizmbets"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: prizmbets-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - prizmbets-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: prizmbets-backend
    restart: unless-stopped
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-prizmbets}:${DB_PASSWORD}@db:5432/prizmbets
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - ALLOWED_ORIGINS=${FRONTEND_URL}
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./logs:/app/logs
      - ./backups:/app/backups
    ports:
      - "5001:5001"
    networks:
      - prizmbets-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: prizmbets-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_URL=${BACKEND_URL}
      - REACT_APP_STRIPE_PUBLISHABLE_KEY=${STRIPE_PUBLISHABLE_KEY}
      - REACT_APP_FIREBASE_API_KEY=${FIREBASE_API_KEY}
      - REACT_APP_FIREBASE_AUTH_DOMAIN=${FIREBASE_AUTH_DOMAIN}
      - REACT_APP_FIREBASE_PROJECT_ID=${FIREBASE_PROJECT_ID}
      - REACT_APP_SENTRY_DSN=${FRONTEND_SENTRY_DSN}
    ports:
      - "80:80"
      - "443:443"
    networks:
      - prizmbets-network
    depends_on:
      backend:
        condition: service_healthy
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Nginx Load Balancer (optional, for scaling)
  nginx-lb:
    image: nginx:alpine
    container_name: prizmbets-nginx-lb
    restart: unless-stopped
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx-lb.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - prizmbets-network
    depends_on:
      - frontend
      - backend
    profiles:
      - load-balancer

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: prizmbets-celery-worker
    restart: unless-stopped
    command: celery -A app.celery worker --loglevel=info --concurrency=4
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-prizmbets}:${DB_PASSWORD}@db:5432/prizmbets
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/5
    volumes:
      - ./logs:/app/logs
    networks:
      - prizmbets-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - celery

  # Celery Beat Scheduler
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: prizmbets-celery-beat
    restart: unless-stopped
    command: celery -A app.celery beat --loglevel=info
    environment:
      - FLASK_ENV=production
      - DATABASE_URL=postgresql://${DB_USER:-prizmbets}:${DB_PASSWORD}@db:5432/prizmbets
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD}@redis:6379/4
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD}@redis:6379/5
    volumes:
      - ./logs:/app/logs
    networks:
      - prizmbets-network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    profiles:
      - celery

  # Monitoring - Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: prizmbets-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - prizmbets-network
    profiles:
      - monitoring

  # Monitoring - Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: prizmbets-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - prizmbets-network
    depends_on:
      - prometheus
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  prizmbets-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16